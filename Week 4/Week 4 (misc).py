# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ROAwk_Vojgmne7Aul2abeFbFEFI-w91M

# 1. Write a Java program to implement Queue using array.
"""

# Write a program to implement Queue using array.
class Queue:
    def __init__(self, capacity):
        self.capacity = capacity
        self.queue = [None] * capacity
        self.front = 0
        self.rear = -1
        self.size = 0

    def is_empty(self):
        return self.size == 0

    def is_full(self):
        return self.size == self.capacity

    def enqueue(self, item):
        if self.is_full():
            print("Queue is full! Cannot enqueue item.")
        else:
            self.rear = (self.rear + 1) % self.capacity
            self.queue[self.rear] = item
            self.size += 1
            print(f"Enqueued {item} into the queue.")

    def dequeue(self):
        if self.is_empty():
            print("Queue is empty! Cannot dequeue item.")
            return None
        else:
            item = self.queue[self.front]
            self.queue[self.front] = None
            self.front = (self.front + 1) % self.capacity
            self.size -= 1
            return item

    def peek(self):
        if self.is_empty():
            print("Queue is empty! No item to peek.")
            return None
        else:
            return self.queue[self.front]

    def display(self):
        if self.is_empty():
            print("Queue is empty.")
        else:
            print("Queue elements:")
            index = self.front
            for _ in range(self.size):
                print(self.queue[index], end=' ')
                index = (index + 1) % self.capacity
            print()

def main():
    capacity = int(input("Enter the capacity of the queue: "))
    queue = Queue(capacity)

    while True:
        print("\nQueue Operations:")
        print("1. Enqueue")
        print("2. Dequeue")
        print("3. Peek")
        print("4. Display")
        print("5. Exit")

        choice = input("Enter your choice (1-5): ")

        if choice == '1':
            item = int(input("Enter the item to enqueue: "))
            queue.enqueue(item)
        elif choice == '2':
            dequeued_item = queue.dequeue()
            if dequeued_item is not None:
                print(f"Dequeued item: {dequeued_item}")
        elif choice == '3':
            front_item = queue.peek()
            if front_item is not None:
                print(f"Front item: {front_item}")
        elif choice == '4':
            queue.display()
        elif choice == '5':
            print("Exiting...")
            break
        else:
            print("Invalid choice! Please enter a number between 1 and 5.")

if __name__ == "__main__":
    main()

"""# 2. Write a program to calculate Sum of two 2-dimensional arrays.

"""

# 2. Write a program to calculate Sum of two 2-dimensional arrays.
def add_matrices(matrix1, matrix2):
    """Add two 2-dimensional matrices."""
    if len(matrix1) != len(matrix2) or any(len(row1) != len(row2) for row1, row2 in zip(matrix1, matrix2)):
        raise ValueError("Matrices must have the same dimensions.")

    result = [[0 for _ in range(len(matrix1[0]))] for _ in range(len(matrix1))]

    for i in range(len(matrix1)):
        for j in range(len(matrix1[i])):
            result[i][j] = matrix1[i][j] + matrix2[i][j]

    return result

def main():
    rows = int(input("Enter the number of rows: "))
    cols = int(input("Enter the number of columns: "))

    print("Enter the elements of the first matrix:")
    matrix1 = []
    for i in range(rows):
        row = list(map(int, input(f"Enter row {i + 1} (space-separated values): ").split()))
        matrix1.append(row)

    print("Enter the elements of the second matrix:")
    matrix2 = []
    for i in range(rows):
        row = list(map(int, input(f"Enter row {i + 1} (space-separated values): ").split()))
        matrix2.append(row)

    result = add_matrices(matrix1, matrix2)

    print("Sum of the two matrices:")
    for row in result:
        print('\t'.join(map(str, row)))

if __name__ == "__main__":
    main()

"""# 3. Write a Java program to find the range of a 1D array.

"""

# 3. Write a Java program to find the range of a 1D array.
def find_range(arr):
    return max(arr) - min(arr)

arr = [10, 15, 7, 22, 13]
print(f"Range of the array: {find_range(arr)}")

"""# 4. Write a Java program to search an element in an array.

"""

# 4. Write a Java program to search an element in an array.
def search_element(arr, element):
    if element in arr:
        return arr.index(element)
    return -1

def main():
    arr = list(map(int, input("Enter integers for the array separated by spaces: ").split()))
    element = int(input("Enter the element to search for: "))
    index = search_element(arr, element)
    if index != -1:
        print(f"Element {element} found at index {index}.")
    else:
        print(f"Element {element} not found in the array.")

if __name__ == "__main__":
    main()

"""# 5. Write a Java program to find the sum of even numbers in an integer array.

"""

# 5. Write a Java program to find the sum of even numbers in an integer array.
def sum_of_even_numbers(arr):
    return sum(x for x in arr if x % 2 == 0)

def main():
    arr = list(map(int, input("Enter integers for the array separated by spaces: ").split()))
    print(f"Sum of even numbers: {sum_of_even_numbers(arr)}")

if __name__ == "__main__":
    main()

"""# 6. Write a Java program to find the sum of diagonal elements in a 2D array.

"""

# 6. Write a Java program to find the sum of diagonal elements in a 2D array.
def sum_of_diagonals(matrix):
    primary_diagonal = sum(matrix[i][i] for i in range(len(matrix)))
    secondary_diagonal = sum(matrix[i][len(matrix)-1-i] for i in range(len(matrix)))
    return primary_diagonal + secondary_diagonal

def main():
    n = int(input("Enter the size of the square matrix (n x n): "))
    matrix = []
    print("Enter the matrix row by row:")
    for _ in range(n):
        row = list(map(int, input().split()))
        matrix.append(row)
    print(f"Sum of diagonal elements: {sum_of_diagonals(matrix)}")

if __name__ == "__main__":
    main()
3

"""
# 7. Reverse the elements in an array of integers without using a second array.
"""

# 7. Reverse the elements in an array of integers without using a second array.
def reverse_array(arr):
    left, right = 0, len(arr) - 1
    while left < right:
        arr[left], arr[right] = arr[right], arr[left]
        left += 1
        right -= 1

def main():
    arr = list(map(int, input("Enter integers for the array separated by spaces: ").split()))
    reverse_array(arr)
    print(f"Reversed array: {' '.join(map(str, arr))}")

if __name__ == "__main__":
    main()

"""
# 8. Write a Java program to enter n elements in an array and find smallest number among them.
"""

# 8. Write a Java program to enter n elements in an array and find smallest number among them.
def find_smallest_number(arr):
    if not arr:
        return None
    smallest = arr[0]
    for num in arr:
        if num < smallest:
            smallest = num
    return smallest

arr = list(map(int, input("Enter integers for the array separated by spaces: ").split()))
smallest_number = find_smallest_number(arr)
if smallest_number is not None:
    print(f"Smallest number in the array: {smallest_number}")

"""
# 9. Write Java program to find the sum of all odd numbers in a 2D array.
"""

# 9. Write Java program to find the sum of all odd numbers in a 2D array.

def sum_of_odd_numbers(matrix):
    return sum(x for row in matrix for x in row if x % 2 != 0)

def main():
    n = int(input("Enter the number of rows for the matrix: "))
    m = int(input("Enter the number of columns for the matrix: "))
    matrix = []
    print("Enter the matrix row by row:")
    for _ in range(n):
        row = list(map(int, input().split()))
        matrix.append(row)
    print(f"Sum of odd numbers: {sum_of_odd_numbers(matrix)}")

if __name__ == "__main__":
    main()

"""# 10. Write a Java program to print transpose of matrix."""

# 10. Write a Java program to print transpose of matrix.
def transpose_matrix(matrix):
    return list(zip(*matrix))

def main():
    n = int(input("Enter the number of rows for the matrix: "))
    m = int(input("Enter the number of columns for the matrix: "))
    matrix = []
    print("Enter the matrix row by row:")
    for _ in range(n):
        row = list(map(int, input().split()))
        matrix.append(row)
    transposed = transpose_matrix(matrix)
    print("Transpose of the matrix:")
    for row in transposed:
        print('\t'.join(map(str, row)))

if __name__ == "__main__":
    main()