# -*- coding: utf-8 -*-
"""Week_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GyGJJsQSHzBAqYl-LBvpq5QpRSvpojv4

# 1. Write a program to enter a string. Calculate the length of the string. Find the substring country. Count the occurences of each word in the given sentence.
If the String as input is India is my motherland. I love my country. Capital of India is New Delhi.
"""

# 1. Write a program to enter a string. Calculate the length of the string. Find the substring country. Count the occurences of each word in the given sentence.
# If the String as input is India is my motherland. I love my country. Capital of India is New Delhi.

import string

def main(input_string, substring):
    length_of_string = len(input_string)
    substring_found = substring.lower() in input_string.lower()
    substring_count = input_string.lower().count(substring.lower())

    words = input_string.lower().split()
    word_count = {}

    for word in words:
        word = word.strip(string.punctuation)
        if word in word_count:
            word_count[word] += 1
        else:
            word_count[word] = 1

    return length_of_string, substring_found, substring_count, word_count

input_string = input("Enter a string: ")
substring = input("Enter the substring you want to count: ")

length, substring_found, substring_count, counts = main(input_string, substring)

print(f"Length of the string: {length}")
print(f"Is '{substring}' in the string? {'Yes' if substring_found else 'No'}")
print(f"Count of the substring '{substring}': {substring_count}")
print("Word counts:")
for word, count in counts.items():
    print(f"{word}: {count}")

"""# 2.Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.
```
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world
```
"""

# 2.Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.

def sort_words(input_string):
  words = input_string.split(',')
  words.sort()
  return ','.join(words)

input_string = input("Enter comma-separated words: ")
sorted_string = sort_words(input_string)
print(sorted_string)

"""# 3. Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.
```
Suppose the following input is supplied to the program:
Hello world
Practice makes perfect
Then, the output should be:
HELLO WORLD
PRACTICE MAKES PERFECT

"""

# 3. Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.

def main():
    print("Enter lines of text (press q finish):")

    lines = []
    while True:
        line = input()
        if line == "q":
            break
        lines.append(line)

    print("\nCapitalized lines:")
    for line in lines:
        print(line.upper())

main()

"""# 4. Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.
```
Suppose the following input is supplied to the program:
hello world and practice makes perfect and hello world again
Then, the output should be:
again and hello makes perfect practice world

"""

# 4. Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.
def process_words():
    input_string = input("Enter a sequence of whitespace-separated words: ")

    words = input_string.split()
    unique_words = set(words)
    sorted_words = sorted(unique_words)

    print("Sorted words without duplicates:")
    print(" ".join(sorted_words))

process_words()

"""# *5. Write a program that accepts a sentence and calculate the number of letters and digits.*
```
Suppose the following input is supplied to the program:
hello world! 123
Then, the output should be:
LETTERS 10
DIGITS 3

"""

# 5. Write a program that accepts a sentence and calculate the number of letters and digits.

def count_letters_digits(s):
    letters = 0
    digits = 0

    for char in s:
        if char.isalpha():
            letters += 1
        elif char.isdigit():
            digits += 1

    return letters, digits

s = input("Enter a sentence: ")
letters, digits = count_letters_digits(s)

print(f"LETTERS: {letters}")
print(f"DIGITS:\t {digits}")

"""# 6. Write a program which accepts a string as input to print "Yes" if the string is "yes" or "YES" or "Yes", otherwise print "No".

"""

# 6. Write a program which accepts a string as input to print "Yes" if the string is "yes" or "YES" or "Yes", otherwise print "No".

def main():
    input_string = input("Enter a string: ")

    if input_string.lower() == "yes":
        print("Yes")
    else:
        print("No")

main()

"""# 7. Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.
```
Example:
If the following words is given as input to the program:
2 cats and 3 dogs.
Then, the output of the program should be:
['2', '3']
In case of input data being supplied to the question, it should be assumed to be a console input.
```

"""

# 7. Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.

def main():
    input_string = input("Enter a sequence of words separated by whitespace: ")

    words = input_string.split()
    result = [word for word in words if word.isdigit()]

    print(result)

main()

"""# 8. Please write a program which count and print the numbers of each character in a string input by console.
```
Example:
If the following string is given as input to the program:
abcdefgabc
Then, the output of the program should be:
a,2
c,2
b,2
e,1
d,1
g,1
f,1
```

"""

# 8. Please write a program which count and print the numbers of each character in a string input by console.

def main():
    s = input("Enter a string: ")

    char_count = {}

    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    for char, count in char_count.items():
        print(f"{char}:\t{count}")

main()

"""# 9.Write a program that accepts a string
```
1.reverses it.
2.checks whether it is a palindrome.
3.checks whether it ends with a specific substring.
4.capitalize the first letter of each word in a string
5.check if a string is anagram of another string
6.remove vowels from string
7.find length of the longest word in a sentence
```
"""

# Write a program that accepts a string
#   1.reverses it.
#   2.checks whether it is a palindrome.
#   3.checks whether it ends with a specific substring.
#   4.capitalize the first letter of each word in a string
#   5.check if a string is anagram of another string
#   6.remove vowels from string
#   7.find length of the longest word in a sentence


def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    reversed_s = reverse_string(s)
    return s == reversed_s

def ends_with_substring(s, substring):
    return s.endswith(substring)

def capitalize_first_letter(s):
    return ' '.join(word.capitalize() for word in s.split())

def are_anagrams(s1, s2):
    return sorted(s1) == sorted(s2)

def remove_vowels(s):
    vowels = "aeiouAEIOU"
    return ''.join(char for char in s if char not in vowels)

def longest_word_length(sentence):
    words = sentence.split()
    return max(len(word) for word in words) if words else 0

def main():
    input_string = input("Enter a string: ")

    # 1. Reverse the string
    reversed_str = reverse_string(input_string)
    print(f"Reversed string: {reversed_str}")

    # 2. Check if the string is a palindrome
    palindrome = is_palindrome(input_string)
    print(f"Is palindrome: {'Yes' if palindrome else 'No'}")

    # 3. Check if the string ends with a specific substring
    substring = input("Enter the substring to check if the string ends with: ")
    ends_with = ends_with_substring(input_string, substring)
    print(f"Ends with '{substring}': {'Yes' if ends_with else 'No'}")

    # 4. Capitalize the first letter of each word
    capitalized_str = capitalize_first_letter(input_string)
    print(f"Capitalized string: {capitalized_str}")

    # 5. Check if two strings are anagrams
    another_string = input("Enter another string to check for anagram: ")
    anagram = are_anagrams(input_string, another_string)
    print(f"Are anagrams: {'Yes' if anagram else 'No'}")

    # 6. Remove vowels from the string
    no_vowels_str = remove_vowels(input_string)
    print(f"String without vowels: {no_vowels_str}")

    # 7. Find length of the longest word in a sentence
    sentence = input("Enter a sentence to find the length of the longest word: ")
    longest_word_len = longest_word_length(sentence)
    print(f"Length of the longest word: {longest_word_len}")

main()