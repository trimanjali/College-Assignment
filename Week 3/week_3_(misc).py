# -*- coding: utf-8 -*-
"""Week 3 (misc).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gC5OvyLN7eXydSFw_kauYJAEEMEDdpKc

# 1. Write a Java program to find median of a set of numbers.
"""

# Write a Java program to find median of a set of numbers.

def median(numbers):
    sorted_numbers = sorted(numbers)
    n = len(sorted_numbers)

    if n % 2 == 0:
        mid1, mid2 = sorted_numbers[n // 2 - 1], sorted_numbers[n // 2]
        median = (mid1 + mid2) / 2.0
    else:
        median = sorted_numbers[n // 2]

    return median

def main():
    numbers = list(map(float, input("Enter numbers separated by spaces: ").split()))
    m = median(numbers)
    print(f"The median is: {m}")

if __name__ == "__main__":
    main()

"""# 2. Write a program to compute the value of Euler’s number that is used as the base of natural logarithms. Use the following formula.
```
e= 1+ 1/1! +1 /2! + 1/3+................ 1/n!
```
"""

# 2. Write a program to compute the value of Euler’s number that is used as the base of natural logarithms. Use the following formula.

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def euler_number(n):
    e = 1
    for i in range(1, n + 1):
        e += 1 / factorial(i)
    return e

n = int(input("Enter the value of n: "))
e = euler_number(n)
print(f"The value of Euler's number with n = {n} is: {e}")

"""# 3. Write a Java program to generate all combination of 1, 2, or 3 using loop."""

# 3. Write a Java program to generate all combination of 1, 2, or 3 using loop.

def generate_combinations():
    numbers = [1, 2, 3]

    print("Combinations of length 1:")
    for num1 in numbers:
        print(num1)

    print("\nCombinations of length 2:")
    for num1 in numbers:
        for num2 in numbers:
            print(f"{num1}, {num2}")

    print("\nCombinations of length 3:")
    for num1 in numbers:
        for num2 in numbers:
            for num3 in numbers:
                print(f"{num1}, {num2}, {num3}")

generate_combinations()

"""# 4. Write a Java program to read two integer values m and n and to decide and print whether m is multiple of n."""

# Write a Java program to read two integer values m and n and to decide and print whether m is multiple of n.

def is_multiple(m, n):
    if m % n == 0:
        print(f"{m} is a multiple of {n}.")
    else:
        print(f"{m} is not a multiple of {n}.")

m,n = map(int, input("Enter two integers separated by spaces: ").split())
is_multiple(m, n)

"""# 5. Write a Java program to display prime numbers between a given interval."""

# Write a Java program to display prime numbers between a given interval.

def is_prime(num):
    """Check if a number is prime."""
    if num <= 1:
        return False
    if num == 2:
        return True
    if num % 2 == 0:
        return False

    for i in range(3, int(num**0.5) + 1, 2):
        if num % i == 0:
            return False
    return True

def main():
    start = int(input("Enter the start of the interval: "))
    end = int(input("Enter the end of the interval: "))

    if start > end:
        print("Invalid interval: start should be less than or equal to end.")
        return

    print(f"Prime numbers between {start} and {end}:")
    for num in range(start, end + 1):
        if is_prime(num):
            print(num)

if __name__ == "__main__":
    main()

"""# 6. Pattern
```
1
2 3 4
5 6 7 8 9
```
"""

def print_number_pattern():
    start_number = 1

    num_lines = 3

    for i in range(num_lines):
        for j in range(2 * i + 1):
            print(start_number, end=' ')
            start_number += 1
        print()

if __name__ == "__main__":
    print_number_pattern()

"""# 7. Pattern 2
```
1
2 1 2
3 2 1 2 3
4 3 2 1 2 3 4
```
"""

def print_pyramid_pattern(rows):
    for i in range(1, rows + 1):
        print('  ' * (rows - i), end='')

        for j in range(i, 0, -1):
            print(j, end=' ')

        for j in range(2, i + 1):
            print(j, end=' ')
        print()

if __name__ == "__main__":
    num_rows = 4
    print_pyramid_pattern(num_rows)

"""# 8. Pattern 3
```
1     1
 2   2
  3 3
   4
```
"""

def print_pyramid_pattern(rows):
    for i in range(1, rows + 1):
        print(' ' * (i - 1), end='')
        print(i, end='')
        if i < rows:
            print(' ' * (2 * (rows - i) - 1), end='')
            print(i, end='')
        print()

if __name__ == "__main__":
    num_rows = 4
    print_pyramid_pattern(num_rows)

"""# 9. Write a Java program to calculate Sum & Average of an integer array."""

# Write a program to calculate Sum & Average of an integer array.

def cal(numbers):
    total_sum = sum(numbers)
    if len(numbers) > 0:
        average = total_sum / len(numbers)
    else:
        average = 0
    return total_sum, average

def main():
    user_input = input("Enter integers separated by spaces: ")
    numbers = list(map(int, user_input.split()))

    total_sum, average = cal(numbers)

    print(f"Sum: {total_sum}")
    print(f"Average: {average:.2f}")

if __name__ == "__main__":
    main()

"""# 10. Write a program to implement stack using array."""

# 2. Write a Java program to implement stack using array.

class Stack:
    def __init__(self):
        self.stack = []

    def push(self, item):
        self.stack.append(item)
        print(f"Pushed {item} to the stack.")

    def pop(self):
        if not self.is_empty():
            item = self.stack.pop()
            print(f"Popped {item} from the stack.")
            return item
        else:
            print("Stack is empty. Cannot pop.")
            return None

    def peek(self):
        if not self.is_empty():
            item = self.stack[-1]
            print(f"Top item is {item}.")
            return item
        else:
            print("Stack is empty. No top item.")
            return None

    def is_empty(self):
        return len(self.stack) == 0

    def display(self):
        if not self.is_empty():
            print("Current stack:", self.stack)
        else:
            print("Stack is empty.")

def main():
    stack = Stack()

    while True:
        print("\nStack Operations:")
        print("1. Push")
        print("2. Pop")
        print("3. Peek")
        print("4. Display")
        print("5. Exit")

        choice = input("Enter your choice (1-5): ")

        if choice == '1':
            item = input("Enter the item to push: ")
            stack.push(item)
        elif choice == '2':
            stack.pop()
        elif choice == '3':
            stack.peek()
        elif choice == '4':
            stack.display()
        elif choice == '5':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 5.")

if __name__ == "__main__":
    main()